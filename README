# Minimal json web tokens implementation

## Create new JWT

```

```

## Verify JWT

```

```

## Verify then Parse JWT

```

```

# Signing JWT

JWT signed via hmac and sha256

HS256(base64EncodedHeaders + "." + base64EncodedPayload, secret)

```golang
func sign(h []byte, p []byte, secret []byte) []byte {
	jwtHmacHash := hmac.New(sha256.New, secret)
	jwtHmacHash.Write(h)
	jwtHmacHash.Write([]byte(separator))
	jwtHmacHash.Write(p)

	return encodeBase64(jwtHmacHash.Sum(nil))
}
```

# Verifying JWT

JWT verified if token sign equals to fresh calculated sign

```
func Verify(jwt string, secret []byte) (bool, error) {
	rawHeaders, rawPayload, rawSign, err := parse(jwt)

	if err != nil {
		return false, err
	}

	return bytes.Equal(rawSign, sign(rawHeaders, rawPayload, secret)), nil
}
```

# Validating JWT

```

```

- Sign JWT (hmac + sha256)
- Verify JWT
- Control JWT via `Exp`, `Iat`, `Nbf`

# TODO

- Sign JWT via RSA alg
